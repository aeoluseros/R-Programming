x_0.5 = x
for(i in (2:100)){
x_0.5[i] = (1-lambda)*x[i] + lambda*x_0.5[i-1]
}
load('tsa3.rda')
?points
plot(x[2:101],type = 'l', xlab = 'time', ylab = 'observations and EWMA')
points(x_0.25,type = 'l',col = "blue")
points(x_0.5,type = 'l',col = "green")
points(x_0.75,type = 'l',col = "red")
plot(x[2:101],type = 'l', xlab = 'time', ylab = 'observations and EWMA')
points(x_0.25,type = 'l',col = "blue")
points(x_0.5,type = 'l',col = "green")
points(x_0.75,type = 'l',col = "red")
legend("bottomleft", legend=c("x_0.25", "x_0.5", "x_0.75"), col=c("blue", "green", "red"), lty=c(1,1,1,1))
?legend
legend("bottomleft", legend=c("x_0.25", "x_0.5", "x_0.75"), col=c("blue", "green", "red"), lty=c(1,1,1,1),cex=0.8)
plot(x[2:101],type = 'l', xlab = 'time', ylab = 'observations and EWMA')
points(x_0.25,type = 'l',col = "blue")
points(x_0.5,type = 'l',col = "green")
points(x_0.75,type = 'l',col = "red")
legend("bottomleft", legend=c("x_0.25", "x_0.5", "x_0.75"), col=c("blue", "green", "red"), lty=c(1,1,1,1),cex=0.8)
??Q-statistic
??q-statistic
x <- rnorm (100)
Box.test (x, lag = 1)
Box.test (x, lag = 1, type = "Ljung")
?Box.test
qstat
??qstat
??Ljung
?Box.test
Box.test(x, lag = 1, type = c("Box-Pierce", "Ljung-Box"), fitdf = 0)
?rnorm
# Problem 3.7
#a)
zabs<--1/0.8
rho<-function(h,alpha){
a<-1
b<--1+ (1.6/(1.64*0.8))
rho<-(a+h*b)/((za  bs^h))
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1))
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(-1.6,-0.64),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
#b)
zabs1<--1/0.5
zabs2<-1/0.9
rho<-function(h,alpha){
a<-1
b<-(0.4/(1-0.45)-a/zabs1) * zabs2
rho<- a/(zabs1^h)+b/(zabs2^h)
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1) )
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(0.4,0.45),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
#c)
z = c(1,-1.2,.85)
(z1 = polyroot(z)[1])
(z2 = polyroot(z)[2])
arg = Arg(a)/(2*pi)
1/arg
rho<-function(h,alpha){
a<-1
b<-(1.2/(1+.85)-a/z1) * z2
rho<- a/(z1^h)+b/(z2^h)
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1) )
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(1.2,-.85),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
# Problem 3.7
#a)
zabs<--1/0.8
rho<-function(h,alpha){
a<-1
b<--1+ (1.6/(1.64*0.8))
rho<-(a+h*b)/((zabs^h))
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1))
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(-1.6,-0.64),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
#b)
zabs1<--1/0.5
zabs2<-1/0.9
rho<-function(h,alpha){
a<-1
b<-(0.4/(1-0.45)-a/zabs1) * zabs2
rho<- a/(zabs1^h)+b/(zabs2^h)
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1) )
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(0.4,0.45),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
#c)
z = c(1,-1.2,.85)
(z1 = polyroot(z)[1])
(z2 = polyroot(z)[2])
arg = Arg(a)/(2*pi)
1/arg
rho<-function(h,alpha){
a<-1
b<-(1.2/(1+.85)-a/z1) * z2
rho<- a/(z1^h)+b/(z2^h)
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1) )
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(1.2,-.85),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
# Problem 3.7
#a)
zabs<--1/0.8
rho<-function(h,alpha){
a<-1
b<--1+ (1.6/(1.64*0.8))
rho<-(a+h*b)/((zabs^h))
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1))
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(-1.6,-0.64),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
#b)
zabs1<--1/0.5
zabs2<-1/0.9
rho<-function(h,alpha){
a<-1
b<-(0.4/(1-0.45)-a/zabs1) * zabs2
rho<- a/(zabs1^h)+b/(zabs2^h)
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1) )
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(0.4,0.45),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
#c)
z = c(1,-1.2,.85)
(z1 = polyroot(z)[1])
(z2 = polyroot(z)[2])
arg = Arg(a)/(2*pi)
1/arg
rho<-function(h,alpha){
a<-1
b<-(1.2/(1+.85)-a/z1) * z2
rho<- a/(z1^h)+b/(z2^h)
rho
}
h<-1;rho(h,alpha)
h<-0;rho(h,alpha)
xx<-0:10
yy<-matrix(0,11,1)
for (i in 1:11){
yy[i]<-rho((i-1),alpha)}
par(mfrow=c(2,1) )
plot(xx,yy,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
ACF<-ARMAacf(ar=c(1.2,-.85),ma=0,10)
plot(xx,ACF,type="l",xlab="lag",ylab="rho",main="ACF")
abline(h=0)
install.packages("microbenchmark")
runif(100)
?runif
x<-runif(100)
microbenchmark(
x^(1/2),
x^0.5
)
library(microbenchmark)
microbenchmark(
x^(1/2)
,
exp(log(x)/2)
)
?microbenchmark
mode(3)
arr <- [3,"love"]
arr <- arr[3,"love"]
arr <- c(3,"love")
arr
mode(arr)
arr <- c(3, TRUE)
mode(arr)
arr <- c(1, TRUE)
mode(arr)
arr <- c(TRUE, TRUE)
mode(arr)
TRUE = 3
TRUE =- 3
TRUE == 3
TRUE == 1
arr<-c(0,1,2,3,4,5,6)
as.logical(arr)
?as.logical
6 == TRUE
6 == FALSE
arr<-c(0,1,2,3,4,5,6)
is.logical(arr)
is.logical(1)
is.logical(6)
is.logical(0)
is.logical(TRUE)
is.logical(1)
is.logical(0)
is.logical(TRUE)
is.logical(FALSE)
is.logical(NA)
arr<-c("dfa","daf")
is.logical(arr)
as.logical(arr)
arr
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x=c(1,2,3)
class(x)
makeVector(x)
x$getmean
x$getmean()
x$list
x
x=c(1,2,3)
x
makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x)
x
makeVector(x)
x$m
x
makeVector$x
setmean
setmean(mean)
mean
get
set
makeVector$get
makeVector(x)
makeVector(x)$set
makeVector(x)$getmean
makeVector(x)$getmean()
makeVector(x)$setmean(x)
makeVector(x)$setmean(mean(x))
makeVector(x)$getmean()
makeVector(x)
lapply(x, makeVector)
sapply(x, makeVector)
lapply(x, makeVector)
apply(x, makeVector)
lapply(x, makeVector)
makeVector(x)$list
makeVector(x)$list()
makeVector(x)$list
makeVector(x)
cachemean(x)
a <- (1,2,3,4,5,6)
a<-(1,2,3,4,5,6)
a<-c(1,2,3,4,5,6)
a
x<-makeVector(a)
x$list
cachemean(x)
x<-makeVector(a)
a<-c(1,2,3,4,5,6)
x<-makeVector(a)
x$list
cachemean(x)
?which
?rexp
rexp(10,rate=1)
rnorm(1)
rexp
rnorm
C_rexp
??rexp
abline
rexp
.External
.External(C_rexp, n, 1/rate)
.External
?.External(C_rexp, n, 1/rate)
set.seed(2)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(2)
set.seed(2)
rnorm(1)
runif(1)
runif(1)
set.seed(2)
rnorm(1)
runif(1)
runif(1)
set.seed(2)
runif(1)
runif(1)
set.seed(2)
runif(1)
set.seed(2)
rnorm(1)
runif(1)
?set.seed
set.seed(5)
rnorm(1,2,1)
set.seed(5)
set.seed(5)
rnorm(1,2,1)
set.seed(5)
x<rnorm(1,2,1)
.Random.seed
.Random.seed
help.search("rexp")
help.search("rnorm")
?rnorm
??rnorm
args("rnorm")
args("rexp")
con<-url("http://www.jhsph.edu","r")
?url
RMySQL
?RMySQL
??RMySQL
install.packages("RMySQL")
?require
?ggplot2
??ggplot2
qplot
install.packages("ggplot2")
?plot
?par
?sample
matrix
?matrix
?apply
install.packages("caret")
createDataPartition
install.packages("kernlab")
?kernlab
??kernlab
?createDataPartition
library("caret")
library("kernlab")
?lattice
library("ggplot2")
data(spam)
?createDataPartition
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
y
spam
head(spam)
spam$type
inTrain
length(inTrain)
dim(inTrain)
class(inTrain)
length(spam$type)
?cor
training[,-58]
training <- spam[inTrain,]
testing<-spam[-inTrain,]
training[,-58]
training[,58]
training
dim(inTrain)
?createDataPartition
ï¼Ÿdiag
?diag
M
M<-abs(cor(training[,-58]))
M
dim(M)
dim(spam)
which(M>0.8,arr.ind=T)
?which
which(M>0.8,arr.ind=F)
diag(M)<-0
which(M>0.8,arr.ind=T)
which(M>0.8,arr.ind=F)
install.packages("slidify")
library(devtools)
install.packages("devtools")
find_rtools{}
find_rtools()
library(devtools)
find_rtools()
library(devtools)
find_rtools()
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("rmarkdown")
getwd()
setwd("C:/Users/aeoluseros/R-programming")
getwd()
dir()
