fileUrl<-"http://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./GetAndCleanData/camera.xlsx",mode="wb")
fileUrl<-"http://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./GetAndCleanData/camera1.xlsx")
colIndex<-2:3
rowIndex<-1:4
cameraDataSubset<-read.xlsx("./GetAndCleanData/camera.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
cameraDataSubset
?write.xlsx
write.xlsx(cameraDataSubset, "./GetAndCleanData/cameraDataSubset.xlsx")
?read.xlsx
if(!require("XLConnect")){
install.packages("XLConnect")
}
install.packages("XLConnect")
library("XLConnect")
vignette ("XLConnect")  #user manual
?createSheet
wb = loadWorkbook("./GetAndCleanData/camera.xlsx", create = TRUE)
createSheet(wb, name = "womenData")
createName(wb, name = "womenName", formula = "womenData!$C$5", overwrite = TRUE)
writeNamedRegion(wb, women, name = "womenName")
saveWorkbook(wb)
createName(wb, name = "womenName", formula = "womenData!$A$1", overwrite = TRUE)
writeNamedRegion(wb, women, name = "womenName")
saveWorkbook(wb)
womenName
?writeNamedRegion
women
writeWorksheetToFile("ChickWeight.xlsx", data = ChickWeight, sheet = "chickSheet", startRow = 1, startCol = 1)
writeWorksheetToFile("./GetAndCleanData/ChickWeight.xlsx", data = ChickWeight,
sheet = "chickSheet", startRow = 1, startCol = 1)
?？RCurl
??RCurl
RCurl
source('~/.active-rstudio-document')
library(XML)
?XML
??XML
?xmlTreeParse
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
doc
class(doc)
?xmlParse
doc<-xmlParse (fileUrl,useInternal=TRUE) #xmlTreeParse loads the XML document into R memory.
doc
doc<-xmlTreeParse(fileUrl,useInternal=FALSE) #xmlTreeParse loads the XML document into R memory.
doc
rootNote<-xmlRoot(doc)
rootNote
doc
doc<-xmlTreeParse(fileUrl,useInternal=TRUE) #xmlTreeParse loads the XML document into R memory.
doc
rootNote
xmlName(rootNote)
?xmlName
rootNode<-xmlRoot(doc)  #remove the first line of doc: <?xml version="1.0" encoding="UTF-8"?>
xmlName(rootNode)
name(rootNode)
names(rootNode)
?names
root[[1]]
root[[1]][[1]]
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xmlSApply(rootNode, xmlValue)
?xmlSApply
?xmlvalue
?xmlValue
xmlSApply(rootNode, xmlValue,recursive = TRUE) #xmlSApply is a XML-version Sapply
xmlSApply(rootNode, xmlValue,recursive = FALSE) #xmlSApply is a XML-version Sapply
xmlSApply(rootNode, xmlValue) #xmlSApply is a XML-version Sapply
?xmlValue
xpathSapply(rootNde,"//name",xmlValue)
xpathSApply(rootNde,"//name",xmlValue)
xpathSApply(rootNde,"//price",xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
fileUrl<-"http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc<-htmlTreeParse(fileUrl, useInternal=TRUE)
doc
teams<-xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores<-xpathSApply(doc,"//li[@class='score]")
scores<-xpathSApply(doc,"//li[@class='score]",xmlValue)
scores<-xpathSApply(doc,"//li[@class='score]",xmlValue)
doc<-htmlTreeParse(fileUrl, useInternal=TRUE)
scores<-xpathSApply(doc,"//li[@class='score']",xmlValue)
teams<-xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
teams
fileUrl<-"http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc<-htmlTreeParse(fileUrl, useInternal=TRUE)
scores<-xpathSApply(doc,"//li[@class='score']",xmlValue)
teams<-xpathSApply(doc,"//li[@class='team-name']",xmlValue)
teams
scores
scores<-xpathSApply(doc,"//li",xmlValue)
scores
scores<-xpathSApply(doc,"//div[@class="results"]",xmlValue)
scores<-xpathSApply(doc,"//div[@class='results']",xmlValue)
scores
teams<-xpathSApply(doc,"//div[@class='city']",xmlValue)
teams
scores
teams
teams
scores
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
majson<-toJSON(iris,pretty=TRUE)
majson
cat(majson)
?cat
iris2<-fromJSON(myjson)
majson<-toJSON(iris,pretty=TRUE)
cat(majson) #Outputs the objects, concatenating the representations.
#an example about cat:
iter <- stats::rpois(1, lambda = 10)
## print an informative message
cat("iteration = ", iter <- iter + 1, "\n")
iris2<-fromJSON(myjson)
myjson<-toJSON(iris,pretty=TRUE)
cat(myjson) #Outputs the objects, concatenating the representations.
iris2<-fromJSON(myjson)
iris2
head(iris2) == head(iris)
vignette(jasonlite)
vignette(jsonlite)
?vignette
vignette(“jsonlite”)
vignette(“jsonlite”)
vignette("jsonlite")
library(data.table)
library("data.table")
if(!require(data.table)){
install.packages(data.table)
}
if(!require(data.table)){
install.packages(data.table)
}
if(!require("data.table)){
install.packages("data.table")
}
if(!require("data.table)){
install.packages("data.table")
}
if(!require("data.table)){
install.packages("data.table")
}
if(!require("data.table"){
install.packages("data.table")
}
library("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
library("data.table")
DF<-data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DF
head(DF)
head(DF,3)
DT<-data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT
head(DT,3)
tables()
?data.table
vignette("datatable-intro")
vignette("jsonlite")
？jsonlite
？jsonlite
??jsonlite
vignette("jsonlite")
library(jsonlite)
vignette("jsonlite")
baseurl <- "http://projects.propublica.org/nonprofits/api/v1/search.json?order=revenue&sort_order=desc"
mydata0 <- fromJSON(paste0(baseurl, "&page=0"), flatten = TRUE)
mydata1 <- fromJSON(paste0(baseurl, "&page=1"), flatten = TRUE)
mydata2 <- fromJSON(paste0(baseurl, "&page=2"), flatten = TRUE)
mydata0
mydata0$filings[1:10, c("organization.sub_name", "organization.city", "totrevenue")]
nrow(mydata0$filings)
filings <- rbind.pages(
list(mydata0$filings, mydata1$filings, mydata2$filings)
)
filings
?rbind.pages
class(mydata0$filings)
class(list(mydata0$filings, mydata1$filings, mydata2$filings))
filings <- rbind.pages(list(mydata0$filings, mydata1$filings, mydata2$filings))[1:10, c("organization.sub_name", "organization.city", "totrevenue")]
#rbind.pages {jsonlite}: rbind.pages(list of data.frames)
filings
filings <- rbind.pages(list(mydata0$filings, mydata1$filings, mydata2$filings))[1:10]
filings
head(filings)
colnames(filings)
baseurl <- "http://projects.propublica.org/nonprofits/api/v1/search.json?order=revenue&sort_order=desc"
pages <- list()
for(i in 0:20){
mydata <- fromJSON(paste0(baseurl, "&page=", i))
message("Retrieving page ", i)
pages[[i+1]] <- mydata$filings
}
#combine all into one
filings <- rbind.pages(pages)
#check output
nrow(filings)
?paste0
class(pages)
?fromJSON
baseurl <- "http://projects.propublica.org/nonprofits/api/v1/search.json?order=revenue&sort_order=desc"
pages <- list() #declare an empty list
for(i in 0:30){
if(i==20) next
mydata <- fromJSON(paste0(baseurl, "&page=", i)) #paste0 is the no-sep version of paste
message("Retrieving page ", i)
pages[[i+1]] <- mydata$filings
}
#combine all into one
filings <- rbind.pages(pages)
#check output
nrow(filings)
mydata <- fromJSON(paste0(baseurl, "&page=", 17)) #paste0 is the no-sep version of paste
baseurl <- "http://projects.propublica.org/nonprofits/api/v1/search.json?order=revenue&sort_order=desc"
pages <- list() #declare an empty list
for(i in 0:30){
if(i==18|i==20) next
mydata <- fromJSON(paste0(baseurl, "&page=", i)) #paste0 is the no-sep version of paste
message("Retrieving page ", i)
pages[[i+1]] <- mydata$filings
}
#combine all into one
filings <- rbind.pages(pages)
#check output
nrow(filings)
class(mydata)
jsonData
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos") #save to list
class(jsonData)
class(mydata0)
class(jsonData)
class(mydata0)
dateDownloaded<-date()
fileUrl<-"http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc<-htmlTreeParse(fileUrl, useInternal=TRUE)
scores<-xpathSApply(doc,"//div[@class='results']",xmlValue)
teams<-xpathSApply(doc,"//div[@class='city']",xmlValue)
teams
scores #L means lose
?xpathSApply
?fromJSON
jsonData<-fromJSON(readLines("https://api.github.com/users/jtleek/repos") #save JSON data to "data.frame"
)
jsonData<-fromJSON(readLines("https://api.github.com/users/jtleek/repos")) #save JSON data to "data.frame"
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
?readLines
readLines("https://api.github.com/users/jtleek/repos")
mydata0 <- fromJSON(paste0(baseurl, "&page=0"), flatten = TRUE) #flatten=TRUE: automatically flatten nested data frames into a single non-nested data frame
mydata0 <- fromJSON(paste0(baseurl, "&page=0"), flatten = TRUE) #flatten=TRUE: automatically flatten nested data frames into a single non-nested data frame
class(mydata0)
DT[2,]
head(DT,3)
DT[2,]
DT[DT&y="a",]
DT[DT$y="a",]
DT[DT$y=="a",]
DT$y
DT$z
DT[c(2,3)]
DT[,c(2,3)]
{x=1
y=2}
k={print(10);5}
print(k)
l
k
k
DT[,list(mean(x),sum(z))]
DT[,table(y)]
DT[,list(2,3)]
DT[,list(x,z)]
DT[,x,z]
DT[,x,y,z]
DT[,y,z]
DT[,y]
DT[,y]  #same as DT$y
DT$y
DT[,list(x,z)]
DT[,list(y,z)]
DT[,list(y,z)]  #replace the incorrect DT[,C(2,3)]
DT[,w:=z^2]
DT
DF[,w:=z^2]
DF<-c(DF,w=z^2)
DF
DF<-data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DF<-data.frame(DF,w=z^2)
DF<-data.frame(DF,w=DF$z^2)
DF
DT[,y:=2]
DT2<-DT
DT[,y:=2]
DT2
DT<-data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT[,w:=z^2]   # := -->new function in data.table. In data frame, we need to use DF<-data.frame(DF,w=DF$z^2)
DT2<-DT
DT[,y:=2]
head(DT,n=3)
head(DT2,n=3)
?copy
DT3<-copy(DT)
DT[,y:=3]   #replace a column
DT3
DT
k=print(10)
k
rm(k)
k={print(10);5}   #first assign k to 10, then assign k to 5
rm(k)
print(k)
k=print(10)
k
k={print(10);5}   #first assign k to 10, then assign k to 5
k
DT[,m:={tmp<-(x+z);log2(tmp+5)}]
DT
DT[,a:=x>0]
DT[,b:=mean(x+w),by=a]
DT
DT[,b:=mean(x+w),by=a]  #by=a means group by a
DT
DT[,a:=x>0]
DT[,b:=mean(x+w),by=a]  #by=a means group by a
DT
DT[,b:=mean(x+w)]
DT
?mean
rbinom(10)
rbinom(10,0.5)
?rbinom
rbinom(10,3,0.5)
rbinom(10,1,0.5)
rbinom(100,1,0.5)
mean(xxx,by=1)
xxx<-rbinom(100,1,0.5)
mean(xxx,by=1)
mean(xxx)
?mean
#.N --> an integer, length 1, containing the number r
set.seed(123)
DT<-data.table(x=sample(letters[1:3],iE5,TRUE))
DT<-data.table(x=sample(letters[1:3],1E5,TRUE))
set.seed(123)
DT<-data.table(x=sample(letters[1:3],1E5,TRUE))
DT
?sample
size(DT)
dim(DT)
DT[,.N, by=x]
library(plyr)
DT<-data.table(x=rep(c("a","b","c"),each=100),y=rnorm(300))
setKey(DT,x)
DT<-data.table(x=rep(c("a","b","c"),each=100),y=rnorm(300))
setKey(DT,x)
DT<-data.table(x=rep(c("a","b","c"),each=100),y=rnorm(300))
setkey(DT,x)
DT['a']
DT<-data.table(x=rep(c("a","b","c"),each=100),y=rnorm(300))
DT
head(DF,3)
head(DT,3)
tables()
DT['a']
setkey(DT,x)
DT['a']
tables()
DT4<-data.table(x=c("a","a","b","dt1"),y=1:4)
DT5<-data.table(x=c("a","b","dt2"),z=5:7)
setkey(DT1, x);setkey(DT2,x)
merge(DT1,DT2)
DT4<-data.table(x=c("a","a","b","dt1"),y=1:4)
DT5<-data.table(x=c("a","b","dt2"),z=5:7)
setkey(DT4, x);setkey(DT5,x)
merge(DT4,DT5)
big_df<-data.frame(x=rnorm(1E6),y=rnorm(1E6))
file<-tempfile()
?tempfile
file
write.table(big_df,file=file,row.names=FALSE,col.names=TRUE,sep="\t",quote=FALSE)
system.time(fread(file))
?fread
system.time(read.table(file,header=TRUE,sep="\t"))
vignette("datatable-intro")
sapply(DT,class) #see the column types
?example(data.table)
big_dt<-data.table(x=rnorm(1E6),y=rnorm(1E6))
file<-tempfile()
write.table(big_dt,file=file,row.names=FALSE,col.names=TRUE,sep="\t",quote=FALSE)
system.time(write.table(big_dt,file=file,row.names=FALSE,col.names=TRUE,sep="\t",quote=FALSE))
system.time(write.table(big_df,file=file,row.names=FALSE,col.names=TRUE,sep="\t",quote=FALSE))
big_df(3)
big_df[3]
DT{3}
DT[3]
DF[3]
DF<-data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DF<-data.frame(DF,w=DF$z^2)
DT<-data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DF<-data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT<-data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT[[3]]==DF[[3]]==DF[3]  #refers to the 3rd columns
DT[[3]]==DF[[3]]
DT[3,]
class(DT[3,])
class(DT)
DT[,j,with=FALSE]
DT[,3,with=FALSE]
DT[,3]
class(DT[,3,with=FALSE])  # DT[,3] returns 3
class(DF[,3])
DT[,"colA",with=FALSE][[1]] == DF[,"colA"]
DT[,"x",with=FALSE][[1]]  # DF[,"colA"]
DT[,"x",with=FALSE][[1]]  # DF[,"x"]
DF[,"x"]
DT[NA]
class(DT[NA])
DF[NA]
DF[NA]
DT[NA]  #returns a 1 row data table
DF[NA]
DF[3]  #refers to the 3rd column,  DF[3] == DF[,3]
DF[NA]
data.frame(list(1:2,"k",1:4))
data.frame(list(1:2,"k",1:4))
data.table(list(1:2,"k",1:4))
？check.names
?check.names
DT[,c(2,3),with=FALSE]
?melt
data.table(list(1:2,"k",1:4)) #create one row
set.seed(45)
require(reshape2)
DT <- data.table(
i1 = c(1:5, NA),
i2 = c(NA,6,7,8,9,10),
f1 = factor(sample(c(letters[1:3], NA), 6, TRUE)),
c1 = sample(c(letters[1:3], NA), 6, TRUE),
d1 = as.Date(c(1:3,NA,4:5), origin="2013-09-01"),
d2 = as.Date(6:1, origin="2012-01-01"))
DT[, l1 := DT[, list(c=list(rep(i1, sample(5,1)))), by = i1]$c] # list cols
DT
DT[, l2 := DT[, list(c=list(rep(c1, sample(5,1)))), by = i1]$c]
melt(DT, id=1:2, measure=3)
DT
DT <- data.table(
i1 = c(1:5, NA),
i2 = c(NA,6,7,8,9,10),
f1 = factor(sample(c(letters[1:3], NA), 6, TRUE)),
c1 = sample(c(letters[1:3], NA), 6, TRUE),
d1 = as.Date(c(1:3,NA,4:5), origin="2013-09-01"),
d2 = as.Date(6:1, origin="2012-01-01"))
DT[, l1 := DT[, list(c=list(rep(i1, sample(5,1)))), by = i1]$c] # list cols
DT[, l2 := DT[, list(c=list(rep(c1, sample(5,1)))), by = i1]$c]
DT <- data.table(
i1 = c(1:5, NA),
i2 = c(NA,6,7,8,9,10),
f1 = factor(sample(c(letters[1:3], NA), 6, TRUE)),
c1 = sample(c(letters[1:3], NA), 6, TRUE),
d1 = as.Date(c(1:3,NA,4:5), origin="2013-09-01"),
d2 = as.Date(6:1, origin="2012-01-01"))
DT[, l1 := DT[, list(c=list(rep(i1, sample(5,1)))), by = i1]$c] # list cols
DT[, l2 := DT[, list(c=list(rep(c1, sample(5,1)))), by = i1]$c]
DT
melt(DT, id=1:2, measure=3)
melt(DT, id=c("i1", "i2"), measure="f1", value.factor=TRUE) # same as above, but value is factor
melt(DT, id=c("i1", "f1"), measure=c("d1", "d2")) # date class attribute lost
melt(DT, id=c("i1", "f1"), measure=c("c1", "d1")) # value is char, date attribute lost
melt(DT, id=1, measure=c("l1", "l2")) # value is a list
melt(DT, id=1, measure=c("c1", "l1")) # c1 coerced to list
melt(DT, id=1, measure=c("c1", "i2"), na.rm=TRUE) # remove NA
?reshape2:::melt
class(melt(DT, id=1, measure=c("c1", "i2"), na.rm=TRUE))
?dcast
names(ChickWeight) <- tolower(names(ChickWeight))
names(ChickWeight)
ChickWeight
head(ChickWeight)
?tolower
names(ChickWeight) <- toupper(names(ChickWeight))
?tolower
head(ChickWeight)
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
dcast.data.table(DT, time ~ variable, fun=mean)
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
dcast.data.table(DT, time ~ variable, fun=mean)
names(ChickWeight) <- tolower(names(ChickWeight))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
dcast.data.table(DT, time ~ variable, fun=mean)
head(ChickWeight)
?head
head(ChickWeight,n=10)
dcast.data.table(DT, time ~ variable, fun=mean)
head(ChickWeight,n=10)
?dcast.data.table
dcast.data.table(DT, diet ~ variable, fun=mean)
ChickWeight
setwd("D:\\study\\DataScience")
