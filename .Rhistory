repeat{
x1<-rbinom(1,1,0.5)
if(abs(x1-x0)<tol){
break
} else{
x0<x1
}
}
x0<-1
tol<-1e-8
repeat{
x1<-rbinom(1,1,0.5)
if(abs(x1-x0)<tol){
break
} else{
x0<x1
}
}
x0<-1
tol<-1e-8
repeat{
x1<-rbinom(1,1,0.5)
print x1
if(abs(x1-x0)<tol){
break
} else{
x0<-x1
}
}
x0<-1
tol<-1e-8
repeat{
x1<-rbinom(1,1,0.5)
print(x1)
if(abs(x1-x0)<tol){
break
} else{
x0<-x1
}
}
x0<-1
tol<-1e-8
repeat{
x1<-rbinom(1,1,0.5)
print(x1)
if(abs(x1-x0)<tol){
break
} else{
x0<-x1
}
}
for(i in 1:100){
if(i<=20)
##skip the first 20 iterations
next
}
for(i in 1:100){
if(i<=20)
##skip the first 20 iterations
next
print(i)
}
for(i in 1:100){
if(i=20)
##skip the first 20 iterations
return 10
print(i)
}
add2<-function(x,y){
x+y
}
add2(3,5)
above<-functio(x,critical){
use<-x>n
x[use]
}
above<-functio(x,critical){
use<-x>n
x[use]
}
above<-functio(x,c){
above<-functio(x,c){
use<-x>c
x[use]
}
above10<-function(x){
use <- x>10
x[use]  #subset x
}
abovec<-functio(x,c){
use<-x>c
x[use]
}
abovec<-functio(x,c){
above<-function(x,c){
use<-x>c
x[use]
}
x<-1:12
above(x,10)
above<-function(x,c=3){
use<-x>c
x[use]
}
x<-1:12
above(x)
columnmean<-function(y){
nc<-ncol(y)  #number of columns
means<-numeric(nc)  #empty vector with all zeros
for(i in 1:nc){
means[i]<-mean(x[,i])
}
}
numeric(10)
columnmeans <- function(sapply(y,mean))
columnmeans <- function(y) sapply(y,mean))
columnmeans <- function(y) sapply(y,mean)
columnmean(airquality)
airquality
columnmean<-function(y){
nc<-ncol(y)  #number of columns
means<-numeric(nc)  #empty vector with all zeros
for(i in 1:nc){
means[i]<-mean(y[,i])
}
}
airquality
columnmean(airquality)
columnmeans(airquality)
columnmean(airquality)
columnmean<-function(y){
nc<-ncol(y)  #number of columns
means<-numeric(nc)  #empty vector with all zeros
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmean(airquality)
columnmeans(airquality)
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)  #number of columns
means<-numeric(nc)  #empty vector with all zeros
for(i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmeans <- function(y) sapply(y,mean(na.rm=TRUE))  #same function
columnmeans(airquality)
columnmeans <- function(y) sapply(y,mean(y,na.rm=TRUE))  #same function
columnmeans(airquality)
?sapply
columnmeans <- function(y) sapply(complete.cases(y),mean)  #same function
columnmeans(airquality)
columnmeans <- function(y) sapply(y[complete.cases(y)],mean)  #same function
columnmeans(airquality)
columnmeans <- function(y) sapply(y[,complete.cases(y)],mean)  #same function
columnmeans(airquality)
complete.cases(y)
complete.cases(airquality)
columnmeans <- function(y) sapply(y[complete.cases(y),],mean)  #same function
columnmeans(airquality)
formals(file)
formals(mean)
args(lm)
lm
formals(lm)
f<-function(a,b){
print(a)
print(b)
}
f(45)
myplot<-function(x,y,type="l",...){
plot(x,y,type=type,...)
}
mean
args(paste)
args(cat)
paste("a","b",sep=":")
paste("a","b",se=":")
c<-paste("a","b",sep=":")
c
c<-cat("a","b",sep=":")
d<-cat("a","b",sep=":")
d
print(c)
c<-paste("a","b",sep=":")
print(c)
print("c")
print(paste("a","b",sep=":"))
lm<-function(x) {x*x}
lm
search(lm)
search()
rm(lm)
lm
rm(lm)
lm
f<-function(x,y){
x^2+y/z
}
f(2,3)
rm(z)
f(2,3)
rm(z)
z<-2
f(2,3)
rm(z)
f(2,3)
z<-2
f(2,3)
search()  # the search list when R tries to find a value
?search
stats.lm
stats::lm
stats::lm()
make.power<-function(n){
pow<-function(x){
x^n
}
pow
}
cube<-make.power(3)
cube<-make.power(3)
cube
cube<-make.power(3)
make.power<-function(n){
pow<-function(x){
x^n
}
pow
}
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(5)
environment(cube)
ls(environment(cube))
?ls
objects(environment(cube))
get("n",environment(cube))
?get
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
?cov_met
?cov.wt
setwd("D:\\study\\DataScience")
oriDates<-pm1$Date
str(oriDates)
library(lubridate)
dates<-ymd(oriDates)
pm0<-read.table("./EDAdata/RD_501_88101_1999-0.txt",comment.char="#",header=FALSE,sep="|",na.strings="")
dim(pm0)
head(pm0)
#because the columns are in the format of comment, we could use readLine to read it in instead of trying to read the column names in read.table
cnames<-readLines("./EDAdata/RD_501_88101_1999-0.txt",1)
#then split out column names
cnames<-strsplit(cnames,"|",fixed=TRUE)
#fixed: logical. If TRUE match split exactly, otherwise use regular expressions.
cnames
class(cnames)  #a list which contains only one list of characters
class(cnames[[1]])  #character
names(pm0)<-cnames[[1]]
head(pm0)
#some column names are not valid because they have spaces in it, such as "state code, county code"
#fix it -- make.names:
names(pm0)<-make.names(cnames[[1]])
head(pm0)
x0<-pm0$Sample.Value
class(x0)
str(x0)
summary(x0)
mean(is.na(x0))  #0.1125532 --> about 11.25% are missing.
pm1<-read.table("./EDAdata/RD_501_88101_2012-0.txt",comment.char="#",header=FALSE,sep="|",na.strings="")
dim(pm1)
cnames_1<-readLines("./EDAdata/RD_501_88101_2012-0.txt",1)
cnames_1<-strsplit(cnames_1,split="|",fixed=TRUE)
cnames_1<-make.names(cnames_1[[1]])
names(pm1)<-cnames_1
head(pm1)
x1<-pm1$Sample.Value
str(x1)
summary(x1)
boxplot(log(x0),log(x1))  #the base of log in R is 10 by default.
negative<-x1<0
str(negative)
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)  #2% values
oriDates<-pm1$Date
str(oriDates)
library(lubridate)
dates<-ymd(oriDates)
dates
str(dates)
ates<-as.Date(as.character(oriDates),"Y%%m%d")
dates<-as.Date(as.character(oriDates),"Y%%m%d")
str(dates)
dates_Date<-as.Date(as.character(oriDates),"Y%%m%d")
str(dates_Date)
numeric(dates_Date)
as.numeric(dates_Date)
str(dates_POSIX)
dates_POSIX<-ymd(oriDates)
str(dates_POSIX)
as.numeric(dates_POSIX)
dates_POSIX
dates_POSIX<-ymd(oriDates)
dates_POSIX
str(dates_POSIX)
str(oriDates)
hist(dates,"month")
hist(dates_Date,"month")
hist(dates_POSIX,"month")
dates_Date<-as.Date(as.character(oriDates),"Y%%m%d")
hist(dates_POSIX,"month")
dates_Date<-as.Date(as.character(oriDates),"Y%%m%d")
hist(dates_Date,"month")
dates_Date<
dates_Date
dates_Date<-as.Date(as.character(oriDates),"Y%%m%d")
oriDates<-pm1$Date  #int
dates_Date<-as.Date(as.character(oriDates),"Y%%m%d")
dates_Date
oriDates<-pm1$Date  #int
dates_Date<-as.Date(as.character(oriDates),"Y%%m%d")
?hist
args(hist)
dates_Date<-as.Date(as.character(oriDates),"Y%%m%d")
hist(dates_Date,"month")
str(dates_POSIX)
str(dates_Date)
dates_Date<-as.Date(as.character(oriDates),"%Y%m%d")
hist(dates_Date,"month")
hist(dates_POSIX,"month")
hist(dates_Date,"month")
hist(dates_POSIX,"month")
hist(dates_POSIX,"month")
hist(dates_Date,"month")
hist(dates_POSIX,"month")
hist(dates_Date,"month")
hist(dates_POSIX,"month")
hist(dates_Date,"month")
hist(dates_POSIX,"month")
hist(dates_Date,"month")
hist(dates_POSIX,"month")
hist(dates_POSIX[negative])
negative<-x1<0
hist(dates_POSIX[negative])
hist(dates_POSIX[negative],"month")
names(pm1)
str(pm1$County.Code)
str(pm1$Site.ID)
str(pm1$Unit)
str(pm1$POC)
str(pm1$Action.Code)
str(pm1$Parameter)
str(pm1$Monitor.Protocol..MP..ID)
site0<-unique(pm0,State.Code==36,c(County.Code, Site.ID))
site0<-unique(pm0,State.Code==36,c(County.Code, Site.ID))
site0<-unique(subset(pm0,State.Code==36,c(County.Code, Site.ID))
)
subset(pm0,State.Code==36,c(County.Code, Site.ID))
head(subset(pm0,State.Code==36,c(County.Code, Site.ID)))
?subset
site0<-unique(subset(pm0,State.Code==36,c(County.Code, Site.ID)))
site1<-unique(subset(pm1,State.Code==36,c(County.Code, Site.ID)))
site0<-paste(site0[,1],site0[0,2],sep=".")
site1<-paste(site1[,1],site1[0,2],sep=".")
site0
str(site0)
str(site1)
intersect(site0,site1)
class(site0)
both
both<-intersect(site0,site1)
both
str(both)
site0<-paste(site0[,1],site0[0,2],sep=".")
site1<-paste(site1[,1],site1[0,2],sep=".")
str(site0)  #33 sites
str(site1)  #18 sites
both<-intersect(site0,site1)
str(both)
site0
site0<-paste(site0[,1],site0[,2],sep=".")
site1<-paste(site1[,1],site1[,2],sep=".")
site0<-unique(subset(pm0,State.Code==36,c(County.Code, Site.ID)))
site1<-unique(subset(pm1,State.Code==36,c(County.Code, Site.ID)))
site0<-paste(site0[,1],site0[,2],sep=".")
site1<-paste(site1[,1],site1[,2],sep=".")
str(site0)  #33 sites
class(site0)  #character
str(site1)  #18 sites
#what's the intersection between these two?
both<-intersect(site0,site1)
str(both)
pm0$County.Site<-with(pm0,paste(County.Code,Site.ID,sep="."))
pm1$County.Site<-with(pm1,paste(County.Code,Site.ID,sep="."))
cnt0<-subset(pm0,State.Code==36 & County.Site %in% both)
cnt1<-subset(pm1,State.Code==36 & County.Site %in% both)
?intersect
split(cnt0,cnt0$County.Site)
sapply(split(cnt1,cnt1$County.Site),nrow)
pm1sub<-subset(pm1, State.Code==36&County.Code==63&Site.ID==2008)
pm0sub<-subset(pm0, State.Code==36&County.Code==63&Site.ID==2008)
pm1sub<-subset(pm1, State.Code==36&County.Code==63&Site.ID==2008)
dim(pm0sub)
dim(pm1sub)
?hist
dates0<-pm0sub$Date
dates1<-pm1sub$Date
x1sub<-pm1sub$Sample.Value
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
plot(as.Date(as.character(dates0),%Y%m%d),x0sub)
plot(as.Date(as.character(dates0),%Y%m%d)),x0sub)
dates0<-as.Date(as.character(dates0),%Y%m%d)
plot(as.Date(as.character(dates0),"%Y%m%d"),x0sub)
plot(as.Date(as.character(dates1),"%Y%m%d"),x1sub)
plot(dates1,x1sub)
dates1<-as.Date(as.character(dates1),"%Y%m%d")
plot(dates1,x1sub)
plot(dates0,x0sub)  #from July
dates0<-as.Date(as.character(dates0),"%Y%m%d")
plot(dates0,x0sub)  #from July
plot(dates1,x1sub)  #from
plot(dates1,x1sub)  #from June 2012 to
tail(dates1)
par(mfrow=c(1,2))
plot(dates0,x0sub)  #from July,1999 to Dec,1999, only half year
plot(dates1,x1sub)  #from June 2012 to March,2012
plot(dates0,x0sub,pch=20)
plot(dates1,x1sub,pch=20)
abline(h=median(x0sub,na.rm=T))
abline(h=median(x1sub,na.rm=T))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm=T))
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm=T))
range(x0sub,x1sub,na.rm=T)
rng<-range(x0sub,x1sub,na.rm=T)
plot(dates0,x0sub,pch=20,ylim=rng)
abline(h=median(x0sub,na.rm=T))
abline(h=median(x1sub,na.rm=T))
plot(dates1,x1sub,pch=20,ylim=rng)
plot(dates0,x0sub,pch=20,ylim=rng)
abline(h=median(x0sub,na.rm=T))
plot(dates1,x1sub,pch=20,ylim=rng)
abline(h=median(x1sub,na.rm=T))
head(pm0)
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=T))
str(mn0)
summary(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=T))
str(mn0)
summary(mn0)
str(mn1)
summary(mn1)
summary(mn1)
mn1
names(mn1)
d0<-data.frame(state=names(mn0),mean=mn0)
d1<-data.frame(state=names(mn1),mean=mn1)
head(do)
head(d0)
mrg<-merge(d0,d1,by="state")
?merge
mrg<-merge(d0,d1,by="state")
head(mrg)
dim(mrg)
head(mrg)
par(mfrow=c(1,1))
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013)))
with(mrg,points(rep(1999,52),mrg[,2],xlim=c(1998,2013)))
with(mrg,points(rep(2012,52),mrg[,2],xlim=c(1998,2013)))
with(mrg,points(rep(2012,52),mrg[,3],xlim=c(1998,2013)))
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013)))  #use rep(1999,52) to make all obs. plotted on one line
with(mrg,points(rep(2012,52),mrg[,3],xlim=c(1998,2013)))
with(mrg,points(rep(2012,52),mrg[,3],xlim=c(1998,2015)))
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013)))  #use rep(1999,52) to make all obs. plotted on one line
with(mrg,points(rep(2012,52),mrg[,3],xlim=c(1998,2015)))
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013)))  #use rep(1999,52) to make all obs. plotted on one line
with(mrg,points(rep(2012,52),mrg[,3],xlim=c(1998,2025)))
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013)))  #use rep(1999,52) to make all obs. plotted on one line
with(mrg,points(rep(2012,52),mrg[,3],xlim=c(1998,2025)))
with(mrg,points(rep(2012,52),mrg[,3])
)
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013)))  #use rep(1999,52) to make all obs. plotted on one line
with(mrg,points(rep(2012,52),mrg[,3]))
segments(rep(1999,52),mrg[,2],rep(2012,52),mrg[,3])
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013),ylim=rng))  #use rep(1999,52) to make all obs. plotted on one line
with(mrg,points(rep(2012,52),mrg[,3]))
#use segments function to connect data points
segments(rep(1999,52),mrg[,2],rep(2012,52),mrg[,3])
with(mrg,plot(rep(1999,52),mrg[,2],xlim=c(1998,2013)))  #use rep(1999,52) to make all obs. plotted on one line
with(mrg,points(rep(2012,52),mrg[,3]))
#use segments function to connect data points
segments(rep(1999,52),mrg[,2],rep(2012,52),mrg[,3])
setwd("D:\\study\\DataScience")
clear
rm(list=ls())
c;c
clc
